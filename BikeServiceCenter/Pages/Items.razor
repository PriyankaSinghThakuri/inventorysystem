@using BikeServiceCenter.Data;
@page "/items"

<nav class="navbar navbar-light bg-light justify-content-between">
    <h1 class="navbar-brand mb-0 h1" style="font-size: 25px; font-weight: 500;color: darkslateblue;">Inventory Items</h1>
    <button class="btn btn-primary" type="button" @onclick="OpenAddItemDialog">
        <span class="oi oi-plus" /> Add
    </button>
</nav>

<table class="table">
    <thead>
        <tr>
            <th>
                <div class="d-flex">
                    <input type="search" class="form-control search" placeholder="Search" @oninput="SearchItemName" />
                    <a class='btn text-@(_sortBy == "itemName" ? "primary" : "secondary")' data-mdb-toggle="tooltip"
                       @onclick='()=>SortByHandler("itemName")'>
                        <span class='oi oi-sort-@(_sortBy == "itemName" ? _sortDirection : "ascending")' />
                    </a>
                </div>
            </th>
              <th>
                <div class="d-flex">
                    Quantity
                    <a class='btn text-@(_sortBy == "quantity" ? "primary" : "secondary")' data-mdb-toggle="tooltip"
                       @onclick='()=>SortByHandler("quantity")'>
                        <span class='oi oi-sort-@(_sortBy == "quantity" ? _sortDirection : "ascending")' />
                    </a>
                </div>
            </th>
            <th>
                <div class="d-flex">
                    TakenOut Date
                    <a class='btn text-@(_sortBy == "takenoutdate" ? "primary" : "secondary")' data-mdb-toggle="tooltip"
                       @onclick='()=>SortByHandler("takenoutdate")'>
                        <span class='oi oi-sort-@(_sortBy == "takenoutdate" ? _sortDirection : "ascending")' />
                    </a>
                </div>
            </th>
        </tr>
    </thead>
    <tbody>
        @{
            IEnumerable<ItemsData> itemList = _items;
            if (_sortBy == "item")
            {
                itemList = _sortDirection == "ascending" ? _items.OrderBy(t => t.ItemName) : itemList.OrderByDescending(t =>
                t.ItemName);
            }
            else if (_sortBy == "quantity")
            {
                itemList = _sortDirection == "ascending" ? itemList.OrderBy(t => t.QuantityinIntentory) : itemList.OrderByDescending(t =>
                t.QuantityinIntentory);
            }
            else if (_sortBy == "takenoutdate")
            {
                itemList = _sortDirection == "ascending" ? itemList.OrderBy(t => t.TakenOutDate) : itemList.OrderByDescending(t =>
                t.TakenOutDate);
            }

            foreach (var item in itemList)
            {
                <tr>
                    <td>@item.ItemName</td>
                    <td>@item.QuantityinIntentory</td>
                <td><p>@item.TakenOutDate.ToString("MMM dd, yyyy h:mm tt")</p></td>
                <td>
                    <button class="btn btn-outline-secondary" type="button"
                        @onclick="()=>OpenEditItemDialog(item)">
                        <span class="oi oi-pencil" /> Edit
                    </button>
                        <button class="btn btn-outline-danger" type="button" @onclick="()=>OpenDeleteItemDialog(item)">
                        <span class="oi oi-delete" /> Delete
                    </button>
                </td>
            </tr>

            }
        }
        
    </tbody>
</table>

 @if (_showEditItemDialog)
{
    <ModalDialog Title="@_dialogTitle" OnClose="@OnEditItemDialogClose" OkLabel="@_dialogOkLabel">
        <div class="form-floating mb-3">
            <input id="itemName" type="text" class="form-control" @bind="_itemModel.ItemName" placeholder="Item Name" />
            <label for="itemName">Item Name</label>
        </div>
            <div class="form-floating mb-3">
            <input id="quantity" type="text" class="form-control" @bind="_itemModel.QuantityinIntentory" placeholder="Quantity" />
              <label for="quantity">Quantity</label>
            </div>
        <div class="form-floating mb-3">
            <label for="takenoutdate">Due Date</label>
            <input id="takenoutdate" type="date" max='@DateTime.Today.ToString("yyyy-MM-dd")' min='@DateTime.Today.AddMonths(-2).ToString("yyyy-MM-dd")'
                value='@_itemModel.TakenOutDate.ToString("yyyy-MM-dd")' @onchange="updatetakenoutDate" class="form-control text-left"
                placeholder="Takenout Date" style="padding-top: 55px">
        </div>

        @if (!string.IsNullOrEmpty(_editItemErrorMessage))
            {
                <Alertmessage Type="danger" Message="@_editItemErrorMessage" />
            }
    </ModalDialog>
}

    @if (_showDeleteItemDialog)
    {
        <ModalDialog Title="Delete Todo" OnClose="@OnDeleteItemDialogClose" OkLabel="Confirm">
            <p>Are you sure you want to delete <strong>@_deleteItem.ItemName</strong> item?</p>
        @if (!string.IsNullOrEmpty(_deleteItemErrorMessage))
                {
                   <Alertmessage Type="danger" Message="@_deleteItemErrorMessage" />
                }
        </ModalDialog>
    }

@code {
    [CascadingParameter]
    private GlobalState _globalState { get; set; }
    private List<ItemsData> _items { get; set; }
    private string _sortBy = "takenoutdate";
    private string _sortDirection = "ascending";
    private bool _showEditItemDialog { get; set; }
    private bool _showDeleteItemDialog { get; set; }
    private string _dialogTitle { get; set; }
    private string _dialogOkLabel { get; set; }
    private ItemsData _deleteItem { get; set; }
    private string _editItemErrorMessage { get; set; }
    private string _deleteItemErrorMessage { get; set; }
    private ItemsData _itemModel { get; set; }

    protected override void OnInitialized()
    {
        _items = ItemsService.GetAll();
    }

    private void OpenAddItemDialog()
    {
        _dialogTitle = "Add Item";
        _dialogOkLabel = "Add";
        _itemModel = new ItemsData();
        _itemModel.Id = Guid.Empty;
        _showEditItemDialog = true;
    }

    private void SortByHandler(string sortByName)
    {
        if (_sortBy == sortByName)
        {
            _sortDirection = _sortDirection == "ascending" ? "descending" : "ascending";
        }
        else
        {
            _sortBy = sortByName;
            _sortDirection = "ascending";
        }
    }

    private void SearchItemName(ChangeEventArgs e)
    {
        var searchTerm = e.Value.ToString();
        if (!string.IsNullOrEmpty(searchTerm) && searchTerm.Length > 2)
        {
            _items = ItemsService.GetAll().Where(t =>
            t.ItemName.ToLower().Contains(searchTerm.ToLower())).ToList();
        }
        else
        {
            _items = ItemsService.GetAll();
        }
    }

    private void OpenEditItemDialog(ItemsData edititem)
    {
        _dialogTitle = "Edit Item";
        _dialogOkLabel = "Save";

        _itemModel = edititem;

        _showEditItemDialog = true;
    }

    private void OpenDeleteItemDialog(ItemsData bikeItem)
    {
        _deleteItem = bikeItem;
        _showDeleteItemDialog = true;
    }
    private void updatetakenoutDate(ChangeEventArgs e)
    {
        _itemModel.TakenOutDate = DateTime.Parse(e.Value.ToString());
    }
    private void OnEditItemDialogClose(bool isCancel)
    {
        if (isCancel)
        {
            _showEditItemDialog = false;
        }
        else
        {
            try
            {
                _editItemErrorMessage = "";
                if (_itemModel.Id == Guid.Empty)
                {
                    _items = ItemsService.Create(_globalState.CurrentUser.Id, _itemModel.Id, _itemModel.ItemName, _itemModel.QuantityinIntentory, _itemModel.TakenOutDate);
                }
                else
                {
                    _items = ItemsService.Update(_globalState.CurrentUser.Id, _itemModel.Id, _itemModel.ItemName, _itemModel.QuantityinIntentory, _itemModel.TakenOutDate);
                }
                _showEditItemDialog = false;
            }
            catch (Exception e)
            {
                _editItemErrorMessage = e.Message;
            }
        }
    }
    private void OnDeleteItemDialogClose(bool isCancel)
    {
        if (isCancel)
        {

            _showDeleteItemDialog = false;
            _deleteItem = null;
        }
        else
        {
            try
            {
                _deleteItemErrorMessage = "";
                _items = ItemsService.Delete(_globalState.CurrentUser.Id, _deleteItem.Id);
                _showDeleteItemDialog = false;
                _deleteItem = null;
            }
            catch (Exception e)
            {
                _deleteItemErrorMessage = e.Message;
            }
        }
    }
}