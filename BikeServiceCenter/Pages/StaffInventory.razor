@page "/staffInventory"
@using BikeServiceCenter.Data
<h3>Staff Inventory</h3>

<table class="table">
    <thead>
        <tr>
            <th>Item Name</th>
            <th>Quantity</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in _items)
        {
            <tr>
                <td>@item.ItemName</td>
                <td>@item.QuantityinIntentory.ToString()</td>

                <button class="btn btn-outline-secondary" type="button" @onclick="()=>OpenWithdrawlInventoryDialog(item)">
                    <span class="oi oi-pencil" /> Withdraw
                </button>
            </tr>
        }
    </tbody>


</table>


@if (_showWithdrawlInventoryDialog)
{
    <ModalDialog Title="@_dialogTitle" OnClose="@OnStaffInventoryDialogClose" OkLabel="@_dialogOkLabel">
        <div class="form-floating mb-3">
            <input id="itemName" type="text" class="form-control" @bind="_itemsModel.ItemName" placeholder="Item Name" />
            <label for="itemName">Item Name</label>
        </div>
        <div class="form-floating mb-3">
            <input id="quantity" type="text" class="form-control" @bind="_itemsModel.QuantityinIntentory" placeholder="Quantity" />
            <label for="quantity">Quantity</label>
        </div>

        @if (!string.IsNullOrEmpty(_editInventoryErrorMessage))
        {
            <Alertmessage Type="danger" Message="@_editInventoryErrorMessage" />
        }
    </ModalDialog>
}

@code {

    [CascadingParameter]
    private GlobalState _globalState { get; set; }
    private List<ItemsData> _items { get; set; }
    private bool _showAddItemDialog { get; set; }
    private bool _showDeleteUserDialog { get; set; }
    private string _addUserErrorMessage { get; set; }
    private string _deleteUserErrorMessage { get; set; }
    private User _deleteUser { get; set; }
    private List<User> _users { get; set; }
    private string _itemName { get; set; }
    private string _quantity { get; set; }
    private bool _showWithdrawlInventoryDialog { get; set; }



    private string _editInventoryErrorMessage { get; set; }
    private string _deleteInventoryErrorMessage { get; set; }
    private string _dialogTitle { get; set; }
    private string _dialogOkLabel { get; set; }
    private ItemsData _itemsModel { get; set; }

    private List<WithdrawlItem> _withdrawlItems { get; set; }

    protected override void OnInitialized()
    {
        _items = ItemsService.GetAll();
        _withdrawlItems = WithdrawlService.GetAll();
    }

    private void OpenWithdrawlInventoryDialog(ItemsData editInventory)
    {
        DateTime currentTime = DateTime.Now;

        _dialogTitle = "Withdraw Items";
        _dialogOkLabel = "Withdraw";
        _itemsModel = editInventory;
        _showWithdrawlInventoryDialog = true;
    }

    private void OnStaffInventoryDialogClose(bool isCancel)
    {


        if (isCancel)
        {
            _showWithdrawlInventoryDialog = false;
        }
        else
        {

            try
            {
                _editInventoryErrorMessage = "";
                if (_itemsModel.Id == Guid.Empty)
                {
                    _items = ItemsService.Create(_globalState.CurrentUser.Id, _itemsModel.Id, _itemsModel.ItemName, _itemsModel.QuantityinIntentory, _itemsModel.TakenOutDate);
                }
                else
                {
                    _items = ItemsService.WithdrawItem(_globalState.CurrentUser.Id, _itemsModel.Id, _itemsModel.ItemName, _itemsModel.QuantityinIntentory);
                    Console.WriteLine(_itemsModel.ItemName);
                }
                _withdrawlItems = WithdrawlService.Create(_globalState.CurrentUser.Id, _itemsModel.Id, _itemsModel.ItemName, _itemsModel.QuantityinIntentory, _globalState.CurrentUser.Username);
                Console.WriteLine("Successfully Added to next Array");
                _showWithdrawlInventoryDialog = false;
            }
            catch (Exception e)
            {
                _editInventoryErrorMessage = e.Message;
            }
        }






    }

}